terminal NAME,STRING;
terminal CHARREF,COMPLEXREF,SIMPLEREF,PREDEFINEDREF,PERCENT;
terminal PUBIDLITERAL,PUBIDCHAR,CHAR,ENTITYREF,NAMECHAR,REFERENCE,ATTVALUE,PEREFERENCE,CHARDATA,ENTITYVALUE,SYSTEMLITERAL;
terminal COMMENTO;
terminal BEGIN_ELEMENT,BEGIN_ENTITY,BEGIN_ATTLIST,BEGIN_TARGETNS;
terminal ANY,EMPTY,END_TAG;
terminal OPENPAR,CLOSEPAR,PCDATA,TOKEN;
terminal QUEST,STAR,PLUS,COMMA,AT,OR,SHARP,AMP,DOT,VIRGOLETTE,PRIORITY;
terminal OPENSQUARE,CLOSESQUARE,OPENBRACE,CLOSEBRACE;
terminal NUMBER;
terminal ANY_ANY,ANY_OTHER,ANY_LOCAL, ANY_TNS;
terminal PATTERN;
terminal SPACE_P,SPACE_R,SPACE_C;
terminal SYSTEM,PUBLIC,NDATA,ROOT;
terminal REQUIRED,IMPLIED,FIXED,NILLABLE;
terminal STRINGTYPE ,TOKENIZEDTYPE,  ENUMERATEDTYPE  ;
terminal XMLDECL;
terminal ATTLISTSTRING,TARGETNSSTRING;

non terminal type_name;

non terminal prolog,dtd,tags;

non terminal entity,element,attlist,targetns,comment;
non terminal contentspec,contemt_any,mixed,simple_mixed,children,choice_name,element_content;
non terminal card_simple, content_type,cp,choice,seq, or_cp, seq_cp,all, all_cp,all_cp_elem;
non terminal card_complex,card_complex_type, card_range,card_occurs,card_range_digit,card_enumeration, card_length, card_length_digit,card_pattern,card_cardinality_digit;
non terminal content_any,any_ns_fixed ,any_ns,occurence_any;
non terminal gedecl ,pedecl,simpedecl,compedecl;
non terminal decl,entitydef ,pedef,externalid,ndatadecl,fixed_val ;
non terminal entitycontentspec,simple_contentspec,complexcontentspec,complex_content_model,simple_children,simple_children_union ,simple_base_type,simple_card_complex_type,simple_card_complex;
non terminal schemaPathState;

/* attlist */
non terminal defaultdecl,defaultdecltemp,c_defaultdecl,attdef,c_attdef,atttype,token_list,token_obj;   

/* GENERAL */
prolog::=	
		XMLDECL:dec dtd:d {:
				Debug.ParserPrint("prolog 1");
				((Tags)d).setDeclaration((String)dec); 
				parser.setDTD((Tags)d);:} | 
		dtd:d {:
				Debug.ParserPrint("prolog 2");
				parser.setDTD((Tags)d);:} ;

dtd::=		
		dtd:d tags:tag {: 
				((Tags)d).add((Tag)tag);
				Debug.ParserPrint("dtd 1");
				RESULT=d; :} | 
		tags:tag {:
				Debug.ParserPrint("dtd 2");
				Tags t=new Tags();
				t.add((Tag)tag);
				RESULT=t;:};

tags::=	entity:n {:
				Debug.ParserPrint("tags 1");
				RESULT=n;:}|
		element:n {:
				Debug.ParserPrint("tags 2");
				RESULT=n;:} |
		attlist:n {:
				Debug.ParserPrint("tags 3");
				RESULT=n;:} |
		targetns:n {:
				Debug.ParserPrint("tags 4");
				RESULT=n;:} |
		comment:n {:
				Debug.ParserPrint("tags 5");
				RESULT=n;:}	
				/*
				|
		error:e{:
				Debug.ParserPrint("tags error");
				//parser.errorList.addElement(ErrorType.PARSER_TOKEN_NOT_ATTENDED,eleft,eright,(String)e,false);	
				:}
				*/
				;

/* END GENERAL */


/* TAGS */

comment ::= 
/*
<!-- comment -->
*/
		COMMENTO:s	{:
				Debug.ParserPrint("commento 1");
				Comment commento=new Comment((String)s);
				commento.left=sleft;
				commento.right=sright;
				RESULT=commento; :};

targetns ::=	
/*
<!TARGETNS "uri">
*/
		BEGIN_TARGETNS:beg TARGETNSSTRING:str END_TAG:end {:
				Debug.ParserPrint("targetns 1 ");
				TargetNS target=new TargetNS((String)str);
				target.left=begleft;
				target.right=begright;
				RESULT=target;
				:}|
/*
<!TARGETNS name "uri">
*/
		BEGIN_TARGETNS:beg NAME:n TARGETNSSTRING:str END_TAG:end {:
				Debug.ParserPrint("targetns 2 "+n);
				TargetNS target=new TargetNS((String)n,(String)str);
				target.left=begleft;
				target.right=begright;
				RESULT=target;
				:}|
/*
<!TARGETNS name ROOT "uri">
*/
		BEGIN_TARGETNS:beg NAME:n TARGETNSSTRING:str ROOT END_TAG:end {:
				Debug.ParserPrint("targetns 2 "+n);
				TargetNS target=new TargetNS((String)n,(String)str,true);
				target.left=begleft;
				target.right=begright;
				RESULT=target;
				:};	


element_content ::=
		contentspec:content {:
			((ContentModel)content).setIsAnonymous();
			RESULT=content;
		:}|
		contentspec:content card_complex:cc {:
				((ContentModel)content).setIsAnonymous();
				((ContentModel)content).setCard((ContentModel)cc);
			RESULT=content;
		:}|
		content_any:content  {:
			RESULT=content;
		:};



element ::=	
/*
<!ELEMENT name (contentmodel)>
*/
		BEGIN_ELEMENT:beg NAME:n element_content:content END_TAG:end {:
				Debug.ParserPrint("element 1 "+n);
				Element element=new Element((String)n,(ContentModel)content);
				element.left=begleft;
				element.right=endright;
				RESULT=element; :}|
/* -----
<!ELEMENT name (contentmodel)>
*/
		BEGIN_ELEMENT:beg NAME:n schemaPathState:state  element_content:content END_TAG:end {:
				Debug.ParserPrint("element - find condition"+n);
				Element element=new Element((String)n,(ContentModel)content);
				element.setSchemaPathState((SchemaPathState)state);
				element.left=begleft;
				element.right=endright;
				RESULT=element; :}
				|
/* -----
<!ELEMENT name (contentmodel)>
*/
		BEGIN_ELEMENT:beg NAME:n element_content:content defaultdecl:dd END_TAG:end {:
				Debug.ParserPrint("element 1 with default"+n);
				Element element=new Element((String)n,(ContentModel)content);
				element.defaultValue=(AttributeDefault)dd;
				element.left=begleft;
				element.right=endright;
				RESULT=element; :}|
/* -----
<!ELEMENT name (contentmodel)>
*/
		BEGIN_ELEMENT:beg NAME:n schemaPathState:state  element_content:content defaultdecl:dd END_TAG:end {:
				Debug.ParserPrint("element - find condition with default"+n);
				Element element=new Element((String)n,(ContentModel)content);
				element.setSchemaPathState((SchemaPathState)state);
				element.defaultValue=(AttributeDefault)dd;
				element.left=begleft;
				element.right=endright;
				RESULT=element; :}
				;



schemaPathState ::=
			STRING:str{:
				Debug.ParserPrint("schemaPath 1 "+str);
				SchemaPathState schemaPathState=new SchemaPathState((String)str);
				RESULT=schemaPathState; :}|
			STRING:str PRIORITY:priority{:
				Debug.ParserPrint("schemaPath 2 "+str);
				SchemaPathState schemaPathState=new SchemaPathState((String)str,Integer.parseInt((String)priority));
				RESULT=schemaPathState; :}|
			ATTLISTSTRING:str{:
				Debug.ParserPrint("schemaPath 3 "+str);
				SchemaPathState schemaPathState=new SchemaPathState((String)str);
				RESULT=schemaPathState; :}|
			ATTLISTSTRING:str PRIORITY:priority{:
				Debug.ParserPrint("schemaPath 4 "+str);
				SchemaPathState schemaPathState=new SchemaPathState((String)str,Integer.parseInt((String)priority));
				RESULT=schemaPathState; :};
		

entity::=	
		gedecl:e {:
				Debug.ParserPrint("entity 1");
				RESULT=e;:}|
		compedecl:e {:
				Debug.ParserPrint("entity 2");
				RESULT=e;:}|
		simpedecl:e {:
				Debug.ParserPrint("entity 3");
				RESULT=e;:}|
		pedecl:e  {:
				Debug.ParserPrint("entity 4");
				RESULT=e;:};

attlist::=
/* 
<!ATTLIST newsalary value ((#DECIMAL)|(#STRING)) #IMPLIED>
*/
		BEGIN_ATTLIST:beg NAME:n attdef:ad END_TAG:end {:
				Debug.ParserPrint("attlist 1 "+n);
				AttList attlist=new AttList((String)n,(AttributeVector)ad);
				attlist.left=begleft;
				attlist.right=endright;
				RESULT=attlist;:} |
/* 
<!ATTLIST @newsalary; value ((#DECIMAL)|(#STRING)) #IMPLIED>
*/
		BEGIN_ATTLIST:beg COMPLEXREF:n attdef:ad END_TAG:end {:
				Debug.ParserPrint("attlist 1 "+n);
				AttList attlist=new AttList((String)n,(AttributeVector)ad);
				attlist.referToComplex=true;
				attlist.left=begleft;
				attlist.right=endright;
				RESULT=attlist;:};

gedecl::=
/* 
<!ENTITY name "value">
*/
		BEGIN_ENTITY:beg NAME:n STRING:s END_TAG:end {:
				Debug.ParserPrint("gedecl 1 "+n);
				EntityCharRef entity = new EntityCharRef((String)n,(String)s);
				entity.left=begleft;
				entity.right=endright;
				RESULT=entity; :};

simpedecl::=
/* 
<!ENTITY # name "simplecontenspec">
*/
		BEGIN_ENTITY:beg SHARP NAME:n  VIRGOLETTE simple_contentspec:content VIRGOLETTE END_TAG:end {:
				Debug.ParserPrint("simple decl 1 "+n);
				EntitySimple entity=new EntitySimple((String)n,(SimpleContentModel)content);
				entity.left=begleft;
				entity.right=endright;
				RESULT=entity;:};

compedecl::=
/* 
<!ENTITY @ name "complexcontentmodel">
*/
		BEGIN_ENTITY:beg AT NAME:n complex_content_model:content END_TAG:end {:
				Debug.ParserPrint("compedec l "+n);
				EntityComplex entity=new EntityComplex((String)n,(EntityComplexProperty)content);
				entity.left=begleft;
				entity.right=endright;
				RESULT=entity;:}|
/* 
<!ENTITY @ name "complexcontentmodel" "attributedefinition">
*/
		BEGIN_ENTITY:beg AT NAME:n complex_content_model:content VIRGOLETTE attdef:ad VIRGOLETTE END_TAG:end {:
				Debug.ParserPrint("compedec 2 "+n);
				EntityComplex entity=new EntityComplex((String)n,(EntityComplexProperty)content,(AttributeVector)ad);
				entity.left=begleft;
				entity.right=endright;
				RESULT=entity;:}|
/* 
<!ENTITY @ name @restrictedtype; "complexcontentmodel" >
*/
		BEGIN_ENTITY:beg AT NAME:n COMPLEXREF:cr complex_content_model:content END_TAG:end {:
				Debug.ParserPrint("compedec 3 "+n);
				EntityComplex entity=new EntityComplex((String)n,(String)cr,(EntityComplexProperty)content);
				entity.left=begleft;
				entity.right=endright;
				RESULT=entity;:}|
/* 
<!ENTITY @ name @restrictedtype; "complexcontentmodel" "attributedefinition">
*/
		BEGIN_ENTITY:beg AT NAME:n COMPLEXREF:cr complex_content_model:content VIRGOLETTE attdef:ad VIRGOLETTE END_TAG:end {:
				Debug.ParserPrint("compedec 4 "+n);
				EntityComplex entity =new EntityComplex((String)n,(String)cr,(EntityComplexProperty)content,(AttributeVector)ad);
				entity.left=begleft;
				entity.right=endright;
				RESULT=entity;:};

complex_content_model::=
/* 
"@derivedtype;,complexcontentmodel"
*/
		VIRGOLETTE COMPLEXREF:derived COMMA complexcontentspec:content VIRGOLETTE {:
				Debug.ParserPrint("complex_content_model 1");
				RESULT=new EntityComplexProperty((ComplexContentModel)content,(String)derived);:}|
/* 
"complexcontentmodel"
*/
		VIRGOLETTE complexcontentspec:content VIRGOLETTE {:
				Debug.ParserPrint("complex_content_model 2");
				RESULT=new EntityComplexProperty((ComplexContentModel)content);:}|
/* 
""
*/
		VIRGOLETTE VIRGOLETTE {:
				Debug.ParserPrint("complex_content_model 3");
				RESULT=new EntityComplexProperty();:}|
/* 
"ANY[,]"
*/
		VIRGOLETTE content_any:content VIRGOLETTE {:
				Debug.ParserPrint("complex_content_model 2");
				RESULT=new EntityComplexProperty((ComplexContentModel)content);:};


complexcontentspec::=
		mixed:content {:
				Debug.ParserPrint("complexcontentspec 1");
				RESULT=content;:}|
		children:content {:
				Debug.ParserPrint("complexcontentspec 2");
				RESULT=content;:}|
		mixed:content card_complex:cc {:
				Debug.ParserPrint("complexcontentspec 3");
				((ComplexContentModel)content).setCard((ContentModel)cc);
				RESULT=content;:}|
		children:content card_complex:cc {:
				Debug.ParserPrint("complexcontentspec 4");
				((ComplexContentModel)content).setCard((ContentModel)cc);
				RESULT=content;:};

contentspec ::= 
/* 
(simplecontent)
*/
		OPENPAR simple_contentspec:content CLOSEPAR{:
				Debug.ParserPrint("content spec 1");
				((SimpleContentModel)content).setIsAnonymous();
				RESULT=content;:}|
/* 
simplecontent
*/
		simple_contentspec:content {:
				Debug.ParserPrint("content spec 2");
				((SimpleContentModel)content).setIsAnonymous();
				RESULT=content;:}|
/* 
CDATA
*/
		STRINGTYPE:string {:
				Debug.ParserPrint("content spec 3");
				SimpleContentModel scm=new SimpleContentModel("CDATA");
				RESULT=scm;:}|
		TOKENIZEDTYPE:string {:
				Debug.ParserPrint("content spec 4 - ERRRRRROOOOOOORE");
				SimpleContentModel scm=new SimpleContentModel((String)string);
				RESULT=scm;:}|
		mixed:content {:
				Debug.ParserPrint("content spec 5");
				RESULT=content;:}|
		children:c {:
				Debug.ParserPrint("content spec 6");
				RESULT=c;:}|
		OPENPAR COMPLEXREF:derived CLOSEPAR{:
				Debug.ParserPrint("content spec 7");
				ComplexReferenceContentModel content=new ComplexReferenceContentModel((String)derived);
				RESULT=content;:}
		;

mixed::=	
/* 
(PCDATA|name1|name2|..|nameN)
*/
		OPENPAR PCDATA choice_name:cn CLOSEPAR   {:
				Debug.ParserPrint("mixed 1 ");
				ComplexContentModel content=new ComplexContentModel();
				content.setIsMixed();
				content.setItems((Vector)cn);
				content.setChoice();
				RESULT=content;:}|
/* 
(PCDATA|name1|name2|..|nameN)
*/
		OPENPAR PCDATA children:content CLOSEPAR   {:
				Debug.ParserPrint("mixed 2 ");
				((ComplexContentModel)content).setIsMixed();
				RESULT=content;:}|
/* ------
(PCDATA|name1|name2|..|nameN)
*/
		OPENPAR PCDATA children:content card_complex:cc CLOSEPAR   {:
				Debug.ParserPrint("mixed 2 ");
				((ComplexContentModel)content).setIsMixed();
				((ComplexContentModel)content).setCard((ContentModel)cc);
				RESULT=content;:}|
/* 
(PCDATA)
*/
		OPENPAR PCDATA CLOSEPAR {:
				Debug.ParserPrint("mixed 3 ");
				ComplexContentModel content=new ComplexContentModel();
				content.setIsMixed();
				RESULT=content;:};

children::=	
		content_type:cs {:
				Debug.ParserPrint("children 1");
				RESULT=cs;:}|
		all:content  {:
				Debug.ParserPrint("children 3");
				RESULT=content;:} ;



/* nome1 | nome2 | .... */
choice_name::=	
		OR NAME:n {:
				Debug.ParserPrint("choice_name 1 ");
				Vector v=new Vector();
				v.add(new ComplexContentModel((String)n));
				RESULT=v;:} | 
		choice_name:vect OR NAME:n {:
				Debug.ParserPrint("choice_name 2 ");
				((Vector)vect).add(new ComplexContentModel((String)n));
				RESULT=vect;:};


content_type::=	
/* 
name1|name2|..|nameN
*/
		choice:content {:
				Debug.ParserPrint("content_type 1");
				RESULT=content;:}| 
/* 
name1,name2,..,nameN
*/
		seq:content  {:
				Debug.ParserPrint("content_type 2 ");
				RESULT=content;:} ; 


/* CHILDREN */
cp::=	
/* 
name
*/
		NAME:n  {:
				Debug.ParserPrint("cp 1 ");
				RESULT=new ComplexContentModel((String)n);:}| 
/* 
name*
*/
		NAME:n  card_complex:cc{:
				Debug.ParserPrint("cp 2 ");
				ComplexContentModel ccm=new ComplexContentModel((String)n);
				ccm.setCard((ContentModel)cc);
				RESULT=ccm;:}|
/* 
(name,name2)
*/
		content_type:content {:
				Debug.ParserPrint("cp 3 ");
				RESULT=content;:}|
/* 
(name,name2)+
*/
		content_type:content card_complex:cc{:
				Debug.ParserPrint("cp 4 ");
				((ComplexContentModel)content).setCard((ContentModel)cc);
				RESULT=content;:};

/* CHOICE */
or_cp::=	
		cp:c {:
				Debug.ParserPrint("or_cp 1");
				Vector v=new Vector();
				v.add(c);
				RESULT=v;:}| 
		cp:c OR or_cp:vect {:
				Debug.ParserPrint("or_cp 2");
				((Vector)vect).insertElementAt(c,0);
				RESULT=vect;:};

choice::=	
		OPENPAR cp:c OR or_cp:vect  CLOSEPAR{:
				Debug.ParserPrint("choice 1");
				((Vector)vect).insertElementAt(c,0);
				ComplexContentModel content=new ComplexContentModel();
				content.setChoice();
				content.setItems((Vector)vect);
				RESULT=content;:};
/* SEQ */
seq_cp::=	cp:c {:			
					Debug.ParserPrint("seq_cp 1");
					Vector v=new Vector();
					v.add(c);
					RESULT=v;:}| 
			cp:c COMMA seq_cp:vect {:
					Debug.ParserPrint("seq_cp 2");
					((Vector)vect).insertElementAt(c,0);
					RESULT=vect;:};

seq::=		OPENPAR seq_cp:vect  CLOSEPAR{:
					Debug.ParserPrint("seq 1");
					ComplexContentModel content=new ComplexContentModel();
					content.setItems((Vector)vect);
					content.setSequence();
					RESULT=content;:}|				
			OPENPAR cp:c seq_cp:vect CLOSEPAR{:				
					Debug.ParserPrint("seq 2");
					((Vector)vect).insertElementAt(c,0);
					ComplexContentModel content=new ComplexContentModel();
					content.setItems((Vector)vect);
					content.setSequence();
					RESULT=content;:};

/* ALL */
all::=		
/* 
(name & name2)
*/
		OPENPAR cp:c AMP all_cp:vect CLOSEPAR {:
				Debug.ParserPrint("all 1");
				((Vector)vect).insertElementAt(c,0);
				ComplexContentModel content=new ComplexContentModel();
				content.setItems((Vector)vect);
				content.setAll();
				RESULT=content;:};

all_cp::=	
		cp:c {:
				Debug.ParserPrint("all_cp 1"+c.getClass().getName());
				Vector v=new Vector();
				v.add(c);
				RESULT=v;:}|
		cp:c AMP  all_cp:vect {:
				Debug.ParserPrint("all_cp 2"+c.getClass().getName());
				((Vector)vect).insertElementAt(c,0);
				RESULT=vect;:};



content_any::=
/* 
ANY
*/

		ANY {:
				Debug.ParserPrint("content ANY 1");
				ComplexContentModel content=new ComplexContentModel();
				content.setAny();
				RESULT="ANY";:}| 
/* 
ANY [,]
*/
		ANY occurence_any:content {:
				Debug.ParserPrint("content ANY 2");
				((ComplexContentModel)content).setAny();
				RESULT=content;:}; 


/* att list*/

attdef::=	
		attdef:vect NAME:n atttype:at defaultdecl:dd {:
				Debug.ParserPrint("attdef 1");
				((ContentModel)at).setIsAnonymous();
				((AttributeVector)vect).add(new Attribute((String)n,(ContentModel)at,(AttributeDefault)dd));
				RESULT=vect;:}|
		attdef:vect NAME:n atttype:at {:
				Debug.ParserPrint("attdef 2");
				((ContentModel)at).setIsAnonymous();
				((AttributeVector)vect).add(new Attribute((String)n,(ContentModel)at));
				RESULT=vect;:}|
		attdef:vect NAME:n schemaPathState:state atttype:at defaultdecl:dd {:
				Debug.ParserPrint("attdef 1");
				((ContentModel)at).setIsAnonymous();
				((AttributeVector)vect).add(new Attribute((String)n,(ContentModel)at,(AttributeDefault)dd,(SchemaPathState)state));
				RESULT=vect;:}|
		attdef:vect NAME:n schemaPathState:state atttype:at {:
				Debug.ParserPrint("attdef 2");
				((ContentModel)at).setIsAnonymous();
				((AttributeVector)vect).add(new Attribute((String)n,(ContentModel)at,(SchemaPathState)state));
				RESULT=vect;:}|
/* 
name (#STRING) "foo"
*/
		NAME:n atttype:at defaultdecl:dd {:
				Debug.ParserPrint("attdef 3");
				AttributeVector vect=new AttributeVector();
				((ContentModel)at).setIsAnonymous();
				vect.add(new Attribute((String)n,(ContentModel)at,(AttributeDefault)dd));
				RESULT=vect;:}|
/* 
name (#STRING)
*/
		NAME:n atttype:at {:
				Debug.ParserPrint("attdef 4");
				AttributeVector vect=new AttributeVector();
				((ContentModel)at).setIsAnonymous();
				vect.add(new Attribute((String)n,(ContentModel)at));
				RESULT=vect;:}|
/* DTD 2.0 
name (#STRING) "foo"
*/
		NAME:n schemaPathState:state atttype:at defaultdecl:dd {:
				Debug.ParserPrint("attdef 3");
				AttributeVector vect=new AttributeVector();
				((ContentModel)at).setIsAnonymous();
				vect.add(new Attribute((String)n,(ContentModel)at,(AttributeDefault)dd,(SchemaPathState)state));
				RESULT=vect;:}|
/* DTD 2.0 
name (#STRING)
*/
		NAME:n schemaPathState:state atttype:at {:
				Debug.ParserPrint("attdef 4");
				AttributeVector vect=new AttributeVector();
				((ContentModel)at).setIsAnonymous();
				vect.add(new Attribute((String)n,(ContentModel)at,(SchemaPathState)state));
				RESULT=vect;:};

atttype::=
		simple_contentspec:cs {:
				Debug.ParserPrint("atttype 1");
				RESULT=cs;:}|
		OPENPAR TOKEN OPENPAR token_list:v CLOSEPAR CLOSEPAR{:
				Debug.ParserPrint("atttype 2");
				SimpleContentModel content=new SimpleContentModel();
				FacetEnumeration facet=new FacetEnumeration((Vector)v);
				((SimpleContentModel)content).add(facet);
				RESULT=content;:}|
		OPENPAR token_list:v CLOSEPAR{:
				Debug.ParserPrint("atttype 4");
				SimpleContentModel content=new SimpleContentModel();
				FacetEnumeration facet=new FacetEnumeration((Vector)v);
				((SimpleContentModel)content).add(facet);
				RESULT=content;:}|
		STRINGTYPE:n {:
				Debug.ParserPrint("atttype 6");
				RESULT=new SimpleContentModel((String)n);:}|
		TOKENIZEDTYPE:n {:
				Debug.ParserPrint("atttype 7");
				RESULT=new SimpleContentModel((String)n);:}|
		ENUMERATEDTYPE:n  {:
				Debug.ParserPrint("atttype 8");
				RESULT=new SimpleContentModel((String)n);:};

defaultdecltemp::=	
		REQUIRED {:
				Debug.ParserPrint("defaultdecltemp 1");
				RESULT=new AttributeDefault(AttributeDefault.REQUIRED,"");:}|
		IMPLIED {:
				Debug.ParserPrint("defaultdecltemp 2");
				RESULT=new AttributeDefault(AttributeDefault.IMPLIED,"");:}|
		FIXED ATTLISTSTRING:s{:
				Debug.ParserPrint("defaultdecltemp 3");
				RESULT=new AttributeDefault(AttributeDefault.FIXED,(String)s);:}|
		ATTLISTSTRING:s {:
				Debug.ParserPrint("defaultdecltemp 4");
				RESULT=new AttributeDefault(AttributeDefault.DEFAULT,(String)s);:};

defaultdecl::=
		defaultdecltemp:ddt
		{:
				Debug.ParserPrint("defaultdecl 1");
				RESULT=ddt;
		:}
		|
		NILLABLE 
		{:
				Debug.ParserPrint("defaultdecl 2");
				AttributeDefault ad=new AttributeDefault(AttributeDefault.IMPLIED,"");
				ad.isNillable=true;
				RESULT=ad;
		:}
		|
		NILLABLE defaultdecltemp:ddt
		{:
				Debug.ParserPrint("defaultdecl 3");
				((AttributeDefault)ddt).isNillable=true;
				RESULT=ddt;
		:}
		|
		defaultdecltemp:ddt NILLABLE
		{:
				Debug.ParserPrint("defaultdecl 4");
				((AttributeDefault)ddt).isNillable=true;
				RESULT=ddt;
		:}
		;

		


/* TOKEN */
token_obj::=	
		NAME:n {:
				Debug.ParserPrint("token_obj 1");
				RESULT=(String)n;:}|
		NUMBER:n {:
				Debug.ParserPrint("token__obj 2");
				RESULT=n;:};


token_list::=	token_obj:n {:
			Debug.ParserPrint("token_list 1");
			Vector v=new Vector();
			v.add(n);
			RESULT=v;:}|
		OR token_obj:n {:
			Debug.ParserPrint("token_list 2");
			Vector v=new Vector();
			v.add(n);
			RESULT=v;:}|
		token_list:vect OR token_obj:n {:
			Debug.ParserPrint("token_list 3");
			((Vector)vect).add(n);
			RESULT=vect;:};


/* CARDINALITY */

card_complex::= 
			card_complex_type:cct {:
					Debug.ParserPrint("Card complex 2");
					SimpleContentModel content=new SimpleContentModel();
					content.add(cct);
					RESULT=content;:};

card_complex_type::= 
			card_simple:cs  {:
					Debug.ParserPrint("card_complex_type 1");
					RESULT=(FacetCardinality)cs;:} |
			card_occurs:cr  {:
					Debug.ParserPrint("card_complex_type 2");
					RESULT=(FacetCardinality)cr;:};

card_enumeration::=
			OPENPAR token_list:vect CLOSEPAR {:
					Debug.ParserPrint("card_enumeration 1");
				FacetEnumeration facet=new FacetEnumeration((Vector)vect);
				RESULT=facet;
			:};

card_pattern::= 
			PATTERN:p {:
					Debug.ParserPrint("card_pattern 1");
					FacetPattern patt=new FacetPattern();
					patt.setString((String)p);
					RESULT=patt;:};

card_range::=	
			CLOSESQUARE card_range_digit:cd CLOSESQUARE {:
					Debug.ParserPrint("card_range 1");
					FacetRange card=new FacetRange((Pair)cd,false,true);
					RESULT=card;:}|
			CLOSESQUARE card_range_digit:cd OPENSQUARE {:			
					Debug.ParserPrint("card_range 2");
					FacetRange card=new FacetRange((Pair)cd,false,false);
					RESULT=card;:}|
			OPENSQUARE card_range_digit:cd OPENSQUARE {:	
					Debug.ParserPrint("card_range 3");
					FacetRange card=new FacetRange((Pair)cd,true,false);
					RESULT=card;:}|
			OPENSQUARE card_range_digit:cd CLOSESQUARE {:	
					Debug.ParserPrint("card_range 4");
					FacetRange card=new FacetRange((Pair)cd,true,true);
					RESULT=card;:};

card_occurs::=	
			OPENSQUARE card_cardinality_digit:cd CLOSESQUARE {:
					Debug.ParserPrint("card_occurs 1");
					FacetCardinality card=new FacetCardinality((Pair)cd);
					RESULT=card;:};

card_range_digit::=	
			NUMBER:d1 COMMA NUMBER:d2  {:
					Debug.ParserPrint("card_range_digit 1");
					RESULT=new Pair(Integer.parseInt((String)d1),Integer.parseInt((String)d2));:}|
			COMMA NUMBER:d2 {:
					Debug.ParserPrint("card_range_digit 2");
					Pair p=new Pair(false,Integer.parseInt((String)d2));
					Debug.ParserPrint("card_range_digit 2"+p);
					RESULT=p;:}|
			NUMBER:d1 COMMA{:
					Debug.ParserPrint("card_range_digit 3");
					RESULT=new Pair(Integer.parseInt((String)d1),false);:} |
			COMMA	{:
					Debug.ParserPrint("card_range_digit 4");
					RESULT=new Pair();:} ;

card_cardinality_digit::=	
			NUMBER:d1 COMMA NUMBER:d2  {:
					Debug.ParserPrint("card_cardinality_digit 1");
					RESULT=new Pair(Integer.parseInt((String)d1),Integer.parseInt((String)d2));:}|
			COMMA NUMBER:d2 {:
					Debug.ParserPrint("card_cardinality_digit 2");
					RESULT=new Pair(false,Integer.parseInt((String)d2));:}|
			NUMBER:d1 COMMA{:
					Debug.ParserPrint("card_cardinality_digit 3");
					RESULT=new Pair(Integer.parseInt((String)d1),false);:};

card_length::=		
			OPENBRACE card_length_digit:cd CLOSEBRACE {:
					Debug.ParserPrint("card_length 1");
					RESULT=new FacetLength((Pair)cd);:};

card_length_digit::=	
			card_range_digit:c {:
					Debug.ParserPrint("card_length_digit 1");
					RESULT=c;:}|
			NUMBER:n1 DOT NUMBER:n2  {:
					Debug.ParserPrint("card_length_digit 2");
					Pair cup=new Pair(Integer.parseInt((String)n1),Integer.parseInt((String)n2));
					cup.SetDot();
					RESULT=cup;:}|
			DOT NUMBER:n {:	
					Debug.ParserPrint("card_length_digit 3");
					Pair cup=new Pair(false,Integer.parseInt((String)n));
					cup.SetDot();
					RESULT=cup;:}|
			NUMBER:n DOT{:	
					Debug.ParserPrint("card_length_digit 4");
					Pair cup=new Pair(Integer.parseInt((String)n),false);
					cup.SetDot();
					RESULT=cup;:}|
			NUMBER:n {:
					Debug.ParserPrint("card_length_digit 5");
					RESULT=new Pair(Integer.parseInt((String)n));:};

card_simple::=  
			QUEST	{:
					Debug.ParserPrint("card_simple 1 ");
					FacetCardinality card=new FacetCardinality();
					card.setQuest();
					RESULT=card; :}|
			STAR	{:
					Debug.ParserPrint("card_simple 2 ");
					FacetCardinality card=new FacetCardinality();
					card.setStar();
					RESULT=card;:} | 
			PLUS	{:
					Debug.ParserPrint("card_simple 3 ");
					FacetCardinality card=new FacetCardinality();
					card.setPlus();
					RESULT=card;:};
 /* END cardinality*/


/* Relativi al tag ANY */

occurence_any::=
			card_occurs:cr content_any:ca {:
					Debug.ParserPrint("occurence any 1");
					((ContentModel)ca).add(cr);
					RESULT=ca;:} |
			content_any:content {:
					Debug.ParserPrint("occurence any 2");
					RESULT=content;:}|
			card_occurs:cr {:
					Debug.ParserPrint("occurence any 3");
					ComplexContentModel content=new ComplexContentModel();
					content.add((FacetCardinality)cr);
					RESULT=content;:};

content_any ::= 
			OPENBRACE any_ns:vect CLOSEBRACE {:
					Debug.ParserPrint("content any 1");
					ComplexContentModel content=new ComplexContentModel();
					content.setAnyNameSpaceList((Vector)vect);
					RESULT=content;:}|
			OPENBRACE any_ns_fixed:ns CLOSEBRACE {:
					Debug.ParserPrint("content any 2");
					ComplexContentModel content=new ComplexContentModel();
					content.setAnyType(((Integer)ns).intValue());
					RESULT=content;:};

any_ns_fixed::= ANY_ANY {:RESULT=new Integer(ComplexContentModel.ANY_ANY);:}| 
				ANY_OTHER {:RESULT=new Integer(ComplexContentModel.ANY_OTHER);:}| 
				ANY_LOCAL {:RESULT=new Integer(ComplexContentModel.ANY_LOCAL);:}| 
				ANY_TNS {:RESULT=new Integer(ComplexContentModel.ANY_TARGET);:};

any_ns::=	NAME:n {:
					Debug.ParserPrint("any ns 1");
					Vector vect=new Vector();
					vect.add(n);
					RESULT=vect;:}| 
			any_ns:vect NAME:n {:
					Debug.ParserPrint("any ns 2");
					((Vector)vect).add(n);
					RESULT=vect;:};
/* ------------------- */


/* tipobase */
simple_contentspec ::= 
		EMPTY {:
				Debug.ParserPrint("simple_contentspec 1");
				SimpleContentModel content=new SimpleContentModel();
				content.setEmpty();
				RESULT=content;:}| 
		simple_children:content {:
				Debug.ParserPrint("simple_contentspec 2");
				RESULT=content;:}|
		simple_children_union:vect {:
				Debug.ParserPrint("simple_contentspec 3");
				Vector tempVect=(Vector)vect;
				SimpleContentModel tempFacet=new SimpleContentModel();
				tempFacet.setIsUnion();
				tempFacet.setItems(tempVect);
				RESULT=tempFacet;
				:}; 
		
simple_children_union::= 
		simple_children:content1  OR simple_children:content2 {:
				Debug.ParserPrint("simple_children_union 1 ");
				Vector vect=new Vector();
				((SimpleContentModel)content1).setIsAnonymous();
				((SimpleContentModel)content2).setIsAnonymous();
				vect.add(content1);
				vect.add(content2);
				RESULT=vect;	
				:}|
		simple_children:content OR simple_children_union:vect {:
				Debug.ParserPrint("simple_children_union 2 ");
				((SimpleContentModel)content).setIsAnonymous();
				((Vector)vect).insertElementAt(content,0);
				RESULT=vect;:};

simple_children::=	
		OPENPAR simple_base_type:cs CLOSEPAR{:
				Debug.ParserPrint("simple_children 1");
				SimpleContentModel f=new SimpleContentModel((String)cs);
				RESULT=f;:}|
		OPENPAR simple_base_type:cs PLUS CLOSEPAR{:
				Debug.ParserPrint("simple_children 2");
				SimpleContentModel f=new SimpleContentModel((String)cs);
				f.setIsList();
				RESULT=f;:}|
		OPENPAR simple_base_type:cs simple_card_complex:scc CLOSEPAR{:
				Debug.ParserPrint("simple_children 3");
				SimpleContentModel f=new SimpleContentModel((String)cs);
				f.setCard((ContentModel)scc);
				RESULT=f;:}|
		OPENPAR simple_base_type:cs PLUS simple_card_complex:scc CLOSEPAR{:
				Debug.ParserPrint("simple_children 4");
				SimpleContentModel f=new SimpleContentModel((String)cs);
				f.setCard((ContentModel)scc);
				f.setIsList();
				RESULT=f;:}
				;

simple_base_type::=
		PREDEFINEDREF:n {:
				Debug.ParserPrint("simple_base_type 1");
				RESULT=n;:}|
		SIMPLEREF:n {:
				Debug.ParserPrint("simple_base_type 2");
				RESULT=n; :};

simple_card_complex::= 
			simple_card_complex:content simple_card_complex_type:cct {:
					Debug.ParserPrint("Simple Card complex 1 ");
					((ContentModel)content).add(cct);
					RESULT=content;:}|
			simple_card_complex_type:cct {:
					Debug.ParserPrint("Simple Card complex 2");
					SimpleContentModel content=new SimpleContentModel();
					content.add(cct);
					RESULT=content;:};

simple_card_complex_type::= 
			card_range:cr  {:
					Debug.ParserPrint("Simple card_complex_type 1");
					RESULT=(FacetRange)cr;:}|
			card_length:cl {:
					Debug.ParserPrint("Simple card_complex_type 2");
					RESULT=(FacetLength)cl;:}|
			card_enumeration:cl {:
					Debug.ParserPrint("Simple card_complex_type 3");
					RESULT=(FacetEnumeration)cl;:}|
			card_pattern:cp {:
					Debug.ParserPrint("Simple card_complex_type 4");
					RESULT=(FacetPattern)cp;:};
